
ㅁ Math.random() : 난수발생
-> 난수 범위 : 0 <= Math.random() < 1
-> 0 ~ 100 사이 난수
=> const randomNumber = Math.floor(Math.random() * 101);

ㅁ floor : 소수점 이하 버림

ㅁ Nan : not a number 
-> 숫자가 아님을 나타내는 값
-> isNan(변수/값) : 변수/값이 Nan이면 true, 
                    Nan이 아니면 false를 반환

ㅁ input요소.checked
->요소가 체크 돼 있으면 true, 아니면 false

ㅁ target-div 속성 값이 "css-div"요소에 접근
-> const container = document.querySelector(' [target-div="css-div"] ')

ㅁ 첫번째 자식 div 선택 방법1
-> document.querySelector('[target-div="css-div"] > div:first-child');

ㅁ 첫번째 자식 div 선택 방법2
-> querySelector() -> 첫번째 요소만 선택한다는 특징이 있음

ㅁ input.focus(); 
-> input에 커서 활성화

ㅁ document.querySelector("#user-input").addEventListener("keyup",function(e){
    // e : 이벤트 객체(발생한 이벤트 정보를 담고있는 객체)
    // e.key : 입력한 키 반환

  if(e.key == "Enter"){//엔터가 눌러졌을 때
    
  }
  })

ㅁ e        : 이벤트 객체 (발생한 이벤트에 대한 정보를 담은 객체)
   e.target : 이벤트가 발생한 대상 요소 (이벤트 발생 요소) 

ㅁ 값이 입력이 안되었거나 빈칸만 입력된 경우
-> 변수명.trim().length == 0

ㅁ return 
-> 함수 종료 (함수가 종료되고 밑에 코드는 실행되지 않는다) 
   + 호출한 곳으로 돌아감

ㅁ 요소(Element) 탐색 (노드 말고 !)
- children : 자식 요소만 모두 선택 
- parentElement : 부모 요소 선택
- firstElementChild : 첫번째 자식 요소 선택
- lastElementChild : 마지막 자식 요소 선택
- previousElementSibling : 이전 형제 요소 선택
- nextElementSibling : 다음 형제 요소 선택

ㅁ append(변수명,변수명,...) : 마지막 자식으로 요소 추가

- div.append(input,span)
-> 변수 div의 자식으로 input, span을 넣겠다

ㅁ input.type = "text"
-> input의 타입 지정

ㅁ 부모요소 제거하기

  span.addEventListener("click", e => {

    // [2] 현재 이벤트가 발생한 요소(클릭된 X버튼)의
    //      부모 요소를 선택(탐색)
    const parent = e.target.parentElement; // == div.row

    // [3] 부모 요소를 제거
    parent.remove();
  });

  ㅁ e.preventDefault(); 
  - 요소의 기본 이벤트 막기(제거)

  ㅁ inputName.addEventListener("input",e=>{});
  -input 이벤트 : 입력과 관련된 모든 행동
                  (단, 어떤 키로 입력했는지는 알 수 없음)

  ㅁ for(let key in 객체명){
    //반복 때마다 key를 하나씩 꺼내와 사용 가능 
  }
  - 객체에 존재하는 key를 순서대로 하나씩 꺼내오는 반복문

  ㅁ 배열.forEach((item,index)=>{
    반복 수행할 구문
  })

  ㅁ 배열.map((item)=>{
    return item * 2  //return 변경된 요소
  })

  ㅁ 배열.reduce((acc,item)=>{
    return acc + item ;
  },초기누산기값)

  ㅁ for ~ of // 배열을 하나씩 가져옴
  - const htmlCollection = document.getElementsByClassName("test");
  
    for(let item of htmlCollection){
    item.textContent = item.textContent + "입니다"
    }

ㅁ && 보다 ||가 연산속도가 빠름

ㅁ switch(식){ // 식의 결과는 정수 또는 문자열
     
      case 결과1 : 결과1의 수행 코드; break;
      case 결과2 : 결과2의 수행 코드; break;
      case 결과3 : 결과3의 수행 코드; break;
      ...
      
      default : 모든 case가 만족하지 못할 때 수행할 코드
      }

ㅁ break : 반복문 멈춤

ㅁ continue : 건너뛰기 + 다시 반복문으로 돌아감

ㅁ prompt ("문자를 입력하세요");
- 확인 -> 입력한 문자열
- 취소 -> null

ㅁ 요소.innerHTML 
- 요소.innerHTML = "h2>문자열</h2>"
=> 요소의 내용으로 문자열을 대입 (HTML 태그를 해석해서 화면에 출력)